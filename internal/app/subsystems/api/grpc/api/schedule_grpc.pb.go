// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: internal/app/subsystems/api/grpc/api/schedule.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulesClient is the client API for Schedules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulesClient interface {
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreatedScheduleResponse, error)
	ReadSchedule(ctx context.Context, in *ReadScheduleRequest, opts ...grpc.CallOption) (*ReadScheduleResponse, error)
	SearchSchedules(ctx context.Context, in *SearchSchedulesRequest, opts ...grpc.CallOption) (*SearchSchedulesResponse, error)
	DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error)
}

type schedulesClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulesClient(cc grpc.ClientConnInterface) SchedulesClient {
	return &schedulesClient{cc}
}

func (c *schedulesClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreatedScheduleResponse, error) {
	out := new(CreatedScheduleResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedules/CreateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesClient) ReadSchedule(ctx context.Context, in *ReadScheduleRequest, opts ...grpc.CallOption) (*ReadScheduleResponse, error) {
	out := new(ReadScheduleResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedules/ReadSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesClient) SearchSchedules(ctx context.Context, in *SearchSchedulesRequest, opts ...grpc.CallOption) (*SearchSchedulesResponse, error) {
	out := new(SearchSchedulesResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedules/SearchSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesClient) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error) {
	out := new(DeleteScheduleResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedules/DeleteSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulesServer is the server API for Schedules service.
// All implementations must embed UnimplementedSchedulesServer
// for forward compatibility
type SchedulesServer interface {
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreatedScheduleResponse, error)
	ReadSchedule(context.Context, *ReadScheduleRequest) (*ReadScheduleResponse, error)
	SearchSchedules(context.Context, *SearchSchedulesRequest) (*SearchSchedulesResponse, error)
	DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error)
	mustEmbedUnimplementedSchedulesServer()
}

// UnimplementedSchedulesServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulesServer struct {
}

func (UnimplementedSchedulesServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*CreatedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedSchedulesServer) ReadSchedule(context.Context, *ReadScheduleRequest) (*ReadScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSchedule not implemented")
}
func (UnimplementedSchedulesServer) SearchSchedules(context.Context, *SearchSchedulesRequest) (*SearchSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSchedules not implemented")
}
func (UnimplementedSchedulesServer) DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (UnimplementedSchedulesServer) mustEmbedUnimplementedSchedulesServer() {}

// UnsafeSchedulesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulesServer will
// result in compilation errors.
type UnsafeSchedulesServer interface {
	mustEmbedUnimplementedSchedulesServer()
}

func RegisterSchedulesServer(s grpc.ServiceRegistrar, srv SchedulesServer) {
	s.RegisterService(&Schedules_ServiceDesc, srv)
}

func _Schedules_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedules/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedules_ReadSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServer).ReadSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedules/ReadSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServer).ReadSchedule(ctx, req.(*ReadScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedules_SearchSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServer).SearchSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedules/SearchSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServer).SearchSchedules(ctx, req.(*SearchSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedules_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulesServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedules/DeleteSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulesServer).DeleteSchedule(ctx, req.(*DeleteScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schedules_ServiceDesc is the grpc.ServiceDesc for Schedules service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedules_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.Schedules",
	HandlerType: (*SchedulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _Schedules_CreateSchedule_Handler,
		},
		{
			MethodName: "ReadSchedule",
			Handler:    _Schedules_ReadSchedule_Handler,
		},
		{
			MethodName: "SearchSchedules",
			Handler:    _Schedules_SearchSchedules_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _Schedules_DeleteSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/subsystems/api/grpc/api/schedule.proto",
}
