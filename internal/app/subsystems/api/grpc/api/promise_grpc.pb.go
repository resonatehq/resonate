// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: internal/app/subsystems/api/grpc/api/promise.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromisesClient is the client API for Promises service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromisesClient interface {
	// Promise
	ReadPromise(ctx context.Context, in *ReadPromiseRequest, opts ...grpc.CallOption) (*ReadPromiseResponse, error)
	SearchPromises(ctx context.Context, in *SearchPromisesRequest, opts ...grpc.CallOption) (*SearchPromisesResponse, error)
	CreatePromise(ctx context.Context, in *CreatePromiseRequest, opts ...grpc.CallOption) (*CreatePromiseResponse, error)
	CancelPromise(ctx context.Context, in *CancelPromiseRequest, opts ...grpc.CallOption) (*CancelPromiseResponse, error)
	ResolvePromise(ctx context.Context, in *ResolvePromiseRequest, opts ...grpc.CallOption) (*ResolvePromiseResponse, error)
	RejectPromise(ctx context.Context, in *RejectPromiseRequest, opts ...grpc.CallOption) (*RejectPromiseResponse, error)
}

type promisesClient struct {
	cc grpc.ClientConnInterface
}

func NewPromisesClient(cc grpc.ClientConnInterface) PromisesClient {
	return &promisesClient{cc}
}

func (c *promisesClient) ReadPromise(ctx context.Context, in *ReadPromiseRequest, opts ...grpc.CallOption) (*ReadPromiseResponse, error) {
	out := new(ReadPromiseResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/ReadPromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promisesClient) SearchPromises(ctx context.Context, in *SearchPromisesRequest, opts ...grpc.CallOption) (*SearchPromisesResponse, error) {
	out := new(SearchPromisesResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/SearchPromises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promisesClient) CreatePromise(ctx context.Context, in *CreatePromiseRequest, opts ...grpc.CallOption) (*CreatePromiseResponse, error) {
	out := new(CreatePromiseResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/CreatePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promisesClient) CancelPromise(ctx context.Context, in *CancelPromiseRequest, opts ...grpc.CallOption) (*CancelPromiseResponse, error) {
	out := new(CancelPromiseResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/CancelPromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promisesClient) ResolvePromise(ctx context.Context, in *ResolvePromiseRequest, opts ...grpc.CallOption) (*ResolvePromiseResponse, error) {
	out := new(ResolvePromiseResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/ResolvePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promisesClient) RejectPromise(ctx context.Context, in *RejectPromiseRequest, opts ...grpc.CallOption) (*RejectPromiseResponse, error) {
	out := new(RejectPromiseResponse)
	err := c.cc.Invoke(ctx, "/promise.Promises/RejectPromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromisesServer is the server API for Promises service.
// All implementations must embed UnimplementedPromisesServer
// for forward compatibility
type PromisesServer interface {
	// Promise
	ReadPromise(context.Context, *ReadPromiseRequest) (*ReadPromiseResponse, error)
	SearchPromises(context.Context, *SearchPromisesRequest) (*SearchPromisesResponse, error)
	CreatePromise(context.Context, *CreatePromiseRequest) (*CreatePromiseResponse, error)
	CancelPromise(context.Context, *CancelPromiseRequest) (*CancelPromiseResponse, error)
	ResolvePromise(context.Context, *ResolvePromiseRequest) (*ResolvePromiseResponse, error)
	RejectPromise(context.Context, *RejectPromiseRequest) (*RejectPromiseResponse, error)
	mustEmbedUnimplementedPromisesServer()
}

// UnimplementedPromisesServer must be embedded to have forward compatible implementations.
type UnimplementedPromisesServer struct {
}

func (UnimplementedPromisesServer) ReadPromise(context.Context, *ReadPromiseRequest) (*ReadPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPromise not implemented")
}
func (UnimplementedPromisesServer) SearchPromises(context.Context, *SearchPromisesRequest) (*SearchPromisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPromises not implemented")
}
func (UnimplementedPromisesServer) CreatePromise(context.Context, *CreatePromiseRequest) (*CreatePromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromise not implemented")
}
func (UnimplementedPromisesServer) CancelPromise(context.Context, *CancelPromiseRequest) (*CancelPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPromise not implemented")
}
func (UnimplementedPromisesServer) ResolvePromise(context.Context, *ResolvePromiseRequest) (*ResolvePromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePromise not implemented")
}
func (UnimplementedPromisesServer) RejectPromise(context.Context, *RejectPromiseRequest) (*RejectPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPromise not implemented")
}
func (UnimplementedPromisesServer) mustEmbedUnimplementedPromisesServer() {}

// UnsafePromisesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromisesServer will
// result in compilation errors.
type UnsafePromisesServer interface {
	mustEmbedUnimplementedPromisesServer()
}

func RegisterPromisesServer(s grpc.ServiceRegistrar, srv PromisesServer) {
	s.RegisterService(&Promises_ServiceDesc, srv)
}

func _Promises_ReadPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).ReadPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/ReadPromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).ReadPromise(ctx, req.(*ReadPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promises_SearchPromises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPromisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).SearchPromises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/SearchPromises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).SearchPromises(ctx, req.(*SearchPromisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promises_CreatePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).CreatePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/CreatePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).CreatePromise(ctx, req.(*CreatePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promises_CancelPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).CancelPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/CancelPromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).CancelPromise(ctx, req.(*CancelPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promises_ResolvePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).ResolvePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/ResolvePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).ResolvePromise(ctx, req.(*ResolvePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promises_RejectPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromisesServer).RejectPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise.Promises/RejectPromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromisesServer).RejectPromise(ctx, req.(*RejectPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Promises_ServiceDesc is the grpc.ServiceDesc for Promises service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Promises_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promise.Promises",
	HandlerType: (*PromisesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPromise",
			Handler:    _Promises_ReadPromise_Handler,
		},
		{
			MethodName: "SearchPromises",
			Handler:    _Promises_SearchPromises_Handler,
		},
		{
			MethodName: "CreatePromise",
			Handler:    _Promises_CreatePromise_Handler,
		},
		{
			MethodName: "CancelPromise",
			Handler:    _Promises_CancelPromise_Handler,
		},
		{
			MethodName: "ResolvePromise",
			Handler:    _Promises_ResolvePromise_Handler,
		},
		{
			MethodName: "RejectPromise",
			Handler:    _Promises_RejectPromise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/subsystems/api/grpc/api/promise.proto",
}
