// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: internal/app/subsystems/api/grpc/api/promise.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PromiseService_ReadPromise_FullMethodName     = "/promise.PromiseService/ReadPromise"
	PromiseService_SearchPromises_FullMethodName  = "/promise.PromiseService/SearchPromises"
	PromiseService_CreatePromise_FullMethodName   = "/promise.PromiseService/CreatePromise"
	PromiseService_CancelPromise_FullMethodName   = "/promise.PromiseService/CancelPromise"
	PromiseService_ResolvePromise_FullMethodName  = "/promise.PromiseService/ResolvePromise"
	PromiseService_RejectPromise_FullMethodName   = "/promise.PromiseService/RejectPromise"
	PromiseService_CompletePromise_FullMethodName = "/promise.PromiseService/CompletePromise"
)

// PromiseServiceClient is the client API for PromiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromiseServiceClient interface {
	// Promise
	ReadPromise(ctx context.Context, in *ReadPromiseRequest, opts ...grpc.CallOption) (*ReadPromiseResponse, error)
	SearchPromises(ctx context.Context, in *SearchPromisesRequest, opts ...grpc.CallOption) (*SearchPromisesResponse, error)
	CreatePromise(ctx context.Context, in *CreatePromiseRequest, opts ...grpc.CallOption) (*CreatePromiseResponse, error)
	CancelPromise(ctx context.Context, in *CancelPromiseRequest, opts ...grpc.CallOption) (*CancelPromiseResponse, error)
	ResolvePromise(ctx context.Context, in *ResolvePromiseRequest, opts ...grpc.CallOption) (*ResolvePromiseResponse, error)
	RejectPromise(ctx context.Context, in *RejectPromiseRequest, opts ...grpc.CallOption) (*RejectPromiseResponse, error)
	CompletePromise(ctx context.Context, in *CompletePromiseRequest, opts ...grpc.CallOption) (*CompletePromiseResponse, error)
}

type promiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromiseServiceClient(cc grpc.ClientConnInterface) PromiseServiceClient {
	return &promiseServiceClient{cc}
}

func (c *promiseServiceClient) ReadPromise(ctx context.Context, in *ReadPromiseRequest, opts ...grpc.CallOption) (*ReadPromiseResponse, error) {
	out := new(ReadPromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_ReadPromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) SearchPromises(ctx context.Context, in *SearchPromisesRequest, opts ...grpc.CallOption) (*SearchPromisesResponse, error) {
	out := new(SearchPromisesResponse)
	err := c.cc.Invoke(ctx, PromiseService_SearchPromises_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) CreatePromise(ctx context.Context, in *CreatePromiseRequest, opts ...grpc.CallOption) (*CreatePromiseResponse, error) {
	out := new(CreatePromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_CreatePromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) CancelPromise(ctx context.Context, in *CancelPromiseRequest, opts ...grpc.CallOption) (*CancelPromiseResponse, error) {
	out := new(CancelPromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_CancelPromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) ResolvePromise(ctx context.Context, in *ResolvePromiseRequest, opts ...grpc.CallOption) (*ResolvePromiseResponse, error) {
	out := new(ResolvePromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_ResolvePromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) RejectPromise(ctx context.Context, in *RejectPromiseRequest, opts ...grpc.CallOption) (*RejectPromiseResponse, error) {
	out := new(RejectPromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_RejectPromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseServiceClient) CompletePromise(ctx context.Context, in *CompletePromiseRequest, opts ...grpc.CallOption) (*CompletePromiseResponse, error) {
	out := new(CompletePromiseResponse)
	err := c.cc.Invoke(ctx, PromiseService_CompletePromise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromiseServiceServer is the server API for PromiseService service.
// All implementations must embed UnimplementedPromiseServiceServer
// for forward compatibility
type PromiseServiceServer interface {
	// Promise
	ReadPromise(context.Context, *ReadPromiseRequest) (*ReadPromiseResponse, error)
	SearchPromises(context.Context, *SearchPromisesRequest) (*SearchPromisesResponse, error)
	CreatePromise(context.Context, *CreatePromiseRequest) (*CreatePromiseResponse, error)
	CancelPromise(context.Context, *CancelPromiseRequest) (*CancelPromiseResponse, error)
	ResolvePromise(context.Context, *ResolvePromiseRequest) (*ResolvePromiseResponse, error)
	RejectPromise(context.Context, *RejectPromiseRequest) (*RejectPromiseResponse, error)
	CompletePromise(context.Context, *CompletePromiseRequest) (*CompletePromiseResponse, error)
	mustEmbedUnimplementedPromiseServiceServer()
}

// UnimplementedPromiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromiseServiceServer struct {
}

func (UnimplementedPromiseServiceServer) ReadPromise(context.Context, *ReadPromiseRequest) (*ReadPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPromise not implemented")
}
func (UnimplementedPromiseServiceServer) SearchPromises(context.Context, *SearchPromisesRequest) (*SearchPromisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPromises not implemented")
}
func (UnimplementedPromiseServiceServer) CreatePromise(context.Context, *CreatePromiseRequest) (*CreatePromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromise not implemented")
}
func (UnimplementedPromiseServiceServer) CancelPromise(context.Context, *CancelPromiseRequest) (*CancelPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPromise not implemented")
}
func (UnimplementedPromiseServiceServer) ResolvePromise(context.Context, *ResolvePromiseRequest) (*ResolvePromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePromise not implemented")
}
func (UnimplementedPromiseServiceServer) RejectPromise(context.Context, *RejectPromiseRequest) (*RejectPromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPromise not implemented")
}
func (UnimplementedPromiseServiceServer) CompletePromise(context.Context, *CompletePromiseRequest) (*CompletePromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePromise not implemented")
}
func (UnimplementedPromiseServiceServer) mustEmbedUnimplementedPromiseServiceServer() {}

// UnsafePromiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromiseServiceServer will
// result in compilation errors.
type UnsafePromiseServiceServer interface {
	mustEmbedUnimplementedPromiseServiceServer()
}

func RegisterPromiseServiceServer(s grpc.ServiceRegistrar, srv PromiseServiceServer) {
	s.RegisterService(&PromiseService_ServiceDesc, srv)
}

func _PromiseService_ReadPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).ReadPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_ReadPromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).ReadPromise(ctx, req.(*ReadPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_SearchPromises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPromisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).SearchPromises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_SearchPromises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).SearchPromises(ctx, req.(*SearchPromisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_CreatePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).CreatePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_CreatePromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).CreatePromise(ctx, req.(*CreatePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_CancelPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).CancelPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_CancelPromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).CancelPromise(ctx, req.(*CancelPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_ResolvePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).ResolvePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_ResolvePromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).ResolvePromise(ctx, req.(*ResolvePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_RejectPromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectPromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).RejectPromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_RejectPromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).RejectPromise(ctx, req.(*RejectPromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseService_CompletePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseServiceServer).CompletePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromiseService_CompletePromise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseServiceServer).CompletePromise(ctx, req.(*CompletePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromiseService_ServiceDesc is the grpc.ServiceDesc for PromiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promise.PromiseService",
	HandlerType: (*PromiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPromise",
			Handler:    _PromiseService_ReadPromise_Handler,
		},
		{
			MethodName: "SearchPromises",
			Handler:    _PromiseService_SearchPromises_Handler,
		},
		{
			MethodName: "CreatePromise",
			Handler:    _PromiseService_CreatePromise_Handler,
		},
		{
			MethodName: "CancelPromise",
			Handler:    _PromiseService_CancelPromise_Handler,
		},
		{
			MethodName: "ResolvePromise",
			Handler:    _PromiseService_ResolvePromise_Handler,
		},
		{
			MethodName: "RejectPromise",
			Handler:    _PromiseService_RejectPromise_Handler,
		},
		{
			MethodName: "CompletePromise",
			Handler:    _PromiseService_CompletePromise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/subsystems/api/grpc/api/promise.proto",
}
