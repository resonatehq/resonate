syntax = "proto3";

package promise;

import "internal/app/subsystems/api/grpc/pb/callback_t.proto";
import "internal/app/subsystems/api/grpc/pb/promise_t.proto";

option go_package = "github.com/resonatehq/resonate/internal/app/subsystems/api/grpc/pb";

service Promises {
    rpc ReadPromise(ReadPromiseRequest) returns (ReadPromiseResponse) {}
    rpc SearchPromises(SearchPromisesRequest) returns (SearchPromisesResponse) {}
    rpc CreatePromise(CreatePromiseRequest) returns (CreatePromiseResponse) {}
    rpc CreatePromiseAndTask(CreatePromiseAndTaskRequest) returns (CreatePromiseAndTaskResponse) {}
    rpc ResolvePromise(ResolvePromiseRequest) returns (ResolvePromiseResponse) {}
    rpc RejectPromise(RejectPromiseRequest) returns (RejectPromiseResponse) {}
    rpc CancelPromise(CancelPromiseRequest) returns (CancelPromiseResponse) {}
}

message ReadPromiseRequest {
    string id = 1;
    string requestId = 2;
}

message ReadPromiseResponse {
    promise_t.Promise promise = 1;
}

enum SearchState {
    SEARCH_ALL = 0;
    SEARCH_PENDING = 1;
    SEARCH_RESOLVED = 2;
    SEARCH_REJECTED = 3;
}

message SearchPromisesRequest {
    string id = 1;
    SearchState state = 2;
    map<string, string> tags = 3;
    int32 limit = 4;
    string cursor = 5;
    string requestId = 6;
}

message SearchPromisesResponse {
    repeated promise_t.Promise promises = 1;
    string cursor = 2;
}

message CreatePromiseRequest {
    string id = 1;
    string idempotencyKey = 2;
    bool strict = 3;
    promise_t.Value param = 4;
    int64 timeout = 5;
    map<string, string> tags = 6;
    string requestId = 7;
}

message CreatePromiseResponse {
    bool noop = 1;
    promise_t.Promise promise = 2;
}

message CreatePromiseAndTaskRequest {
    CreatePromiseRequest promise = 1;
    CreatePromiseTaskRequest task = 2;
}

message CreatePromiseTaskRequest {
    string processId = 1;
    int32 ttl = 2;
    callback_t.Recv recv = 3;
}

message CreatePromiseAndTaskResponse {
    bool noop = 1;
    promise_t.Promise promise = 2;
}

message ResolvePromiseRequest {
    string id = 1;
    string idempotencyKey = 2;
    bool strict = 3;
    promise_t.Value value = 4;
    string requestId = 5;
}

message ResolvePromiseResponse {
    bool noop = 1;
    promise_t.Promise promise = 2;
}

message RejectPromiseRequest {
    string id = 1;
    string idempotencyKey = 2;
    bool strict = 3;
    promise_t.Value value = 4;
    string requestId = 5;
}

message RejectPromiseResponse {
    bool noop = 1;
    promise_t.Promise promise = 2;
}

message CancelPromiseRequest {
    string id = 1;
    string idempotencyKey = 2;
    bool strict = 3;
    promise_t.Value value = 4;
    string requestId = 5;
}

message CancelPromiseResponse {
    bool noop = 1;
    promise_t.Promise promise = 2;
}
