openapi: 3.0.0
info:
  title: Promise API
  description: Manage promises
  version: 1.0.0
paths:
  /promises:
    post:
      tags:
        - Promises
      summary: Create a promise
      operationId: createPromise
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
        - $ref: "#/components/parameters/Strict"
        - $ref: "#/components/parameters/RequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - timeout
              properties:
                id:
                  type: string
                timeout:
                  type: integer
                  format: int64
                param:
                  $ref: "#/components/schemas/PromiseValue"
                tags:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        200:
          description: Operation deduplicated, Promise fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        409:
          description: Promise already exists

    get:
      tags:
        - Promises
      summary: Search promises
      operationId: searchPromises
      parameters:
        - name: id
          in: query
          description: |
            Search promises for matching IDs, can include wildcards.

            For example:
            - "foo/*" matches all IDs starting with "foo/"
            - "*/bar" matches all IDs starting with "bar/"
            - "foo/*/bar" matches all IDs starting with "foo/" and ending with "/bar"
          schema:
            type: string
        - name: state
          in: query
          description: Search promises for matching states
          schema:
            type: string
            enum:
              - pending
              - resolved
              - rejected
        - name: tags
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties:
              type: string
        - name: limit
          in: query
          description: Number of results
          schema:
            type: integer
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                  promises:
                    type: array
                    items:
                      $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request

  /promises/{id}:
    get:
      tags:
        - Promises
      summary: Get a promise
      operationId: getPromise
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        404:
          description: Promise not found

    patch:
      tags:
        - Promises
      summary: Complete a promise
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/RequestId"
        - $ref: "#/components/parameters/IdempotencyKey"
        - $ref: "#/components/parameters/Strict"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
              properties:
                state:
                  $ref: "#/components/schemas/PromiseStateComplete"
                value:
                  $ref: "#/components/schemas/PromiseValue"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        404:
          description: Promise not found

components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: The promise ID
      schema:
        type: string
    IdempotencyKey:
      name: idempotency-key
      in: header
      description: Deduplicates multiple requests
      schema:
        type: string
    Strict:
      name: strict
      in: header
      description: If true, deduplicates only when promise state matches the request
      schema:
        type: boolean
    RequestId:
      name: request-id
      in: header
      description: Unique ID for each request
      schema:
        type: string

  schemas:
    Promise:
      type: object
      required:
        - id
        - state
        - timeout
        - param
        - value
        - tags
      properties:
        id:
          type: string
        state:
          $ref: "#/components/schemas/PromiseState"
        param:
          $ref: "#/components/schemas/PromiseValue"
        value:
          $ref: "#/components/schemas/PromiseValue"
        timeout:
          type: integer
          format: int64
        idempotencyKeyForCreate:
          type: string
          readOnly: true
        idempotencyKeyForComplete:
          type: string
          readOnly: true
        tags:
          type: object
          additionalProperties:
            type: string
        createdOn:
          type: integer
          readOnly: true
        completedOn:
          type: integer
          readOnly: true

    PromiseState:
      type: string
      enum:
        - PENDING
        - RESOLVED
        - REJECTED
        - REJECTED_CANCELED
        - REJECTED_TIMEDOUT

    PromiseStateComplete:
      type: string
      enum:
        - RESOLVED
        - REJECTED
        - REJECTED_CANCELED

    PromiseValue:
      type: object
      required:
        - headers
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
        data:
          type: string
