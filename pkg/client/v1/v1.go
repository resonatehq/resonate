// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for MesgType.
const (
	Invoke MesgType = "invoke"
	Resume MesgType = "resume"
)

// Defines values for PromiseState.
const (
	PromiseStatePENDING          PromiseState = "PENDING"
	PromiseStateREJECTED         PromiseState = "REJECTED"
	PromiseStateREJECTEDCANCELED PromiseState = "REJECTED_CANCELED"
	PromiseStateREJECTEDTIMEDOUT PromiseState = "REJECTED_TIMEDOUT"
	PromiseStateRESOLVED         PromiseState = "RESOLVED"
)

// Defines values for SearchPromisesParamsState.
const (
	Pending  SearchPromisesParamsState = "pending"
	Rejected SearchPromisesParamsState = "rejected"
	Resolved SearchPromisesParamsState = "resolved"
)

// Defines values for CompletePromiseJSONBodyState.
const (
	CompletePromiseJSONBodyStateREJECTED         CompletePromiseJSONBodyState = "REJECTED"
	CompletePromiseJSONBodyStateREJECTEDCANCELED CompletePromiseJSONBodyState = "REJECTED_CANCELED"
	CompletePromiseJSONBodyStateRESOLVED         CompletePromiseJSONBodyState = "RESOLVED"
)

// Callback defines model for Callback.
type Callback struct {
	CreatedOn *int64 `json:"createdOn,omitempty"`
	Id        string `json:"id"`
	PromiseId string `json:"promiseId"`
	Timeout   int64  `json:"timeout"`
}

// Lock defines model for Lock.
type Lock struct {
	ExecutionId string `json:"executionId"`
	ExpiresAt   *int64 `json:"expiresAt,omitempty"`
	ProcessId   string `json:"processId"`
	ResourceId  string `json:"resourceId"`
	Ttl         int    `json:"ttl"`
}

// Mesg defines model for Mesg.
type Mesg struct {
	Promises struct {
		Leaf *struct {
			Data Promise `json:"data"`
			Href string  `json:"href"`
			Id   string  `json:"id"`
		} `json:"leaf,omitempty"`
		Root *struct {
			Data Promise `json:"data"`
			Href string  `json:"href"`
			Id   string  `json:"id"`
		} `json:"root,omitempty"`
	} `json:"promises"`
	Type MesgType `json:"type"`
}

// MesgType defines model for Mesg.Type.
type MesgType string

// Promise defines model for Promise.
type Promise struct {
	CompletedOn               *int64            `json:"completedOn,omitempty"`
	CreatedOn                 *int64            `json:"createdOn,omitempty"`
	Id                        string            `json:"id"`
	IdempotencyKeyForComplete *string           `json:"idempotencyKeyForComplete,omitempty"`
	IdempotencyKeyForCreate   *string           `json:"idempotencyKeyForCreate,omitempty"`
	Param                     Value             `json:"param"`
	State                     PromiseState      `json:"state"`
	Tags                      map[string]string `json:"tags"`
	Timeout                   int64             `json:"timeout"`
	Value                     Value             `json:"value"`
}

// PromiseState defines model for Promise.State.
type PromiseState string

// Recv defines model for Recv.
type Recv struct {
	union json.RawMessage
}

// Recv0 defines model for .
type Recv0 struct {
	Data map[string]interface{} `json:"data"`
	Type string                 `json:"type"`
}

// Recv1 defines model for .
type Recv1 = string

// Schedule defines model for Schedule.
type Schedule struct {
	CreatedOn      *int64            `json:"createdOn,omitempty"`
	Cron           string            `json:"cron"`
	Description    string            `json:"description"`
	Id             string            `json:"id"`
	IdempotencyKey *string           `json:"idempotencyKey,omitempty"`
	LastRunTime    *int64            `json:"lastRunTime,omitempty"`
	NextRunTime    *int64            `json:"nextRunTime,omitempty"`
	PromiseId      string            `json:"promiseId"`
	PromiseParam   Value             `json:"promiseParam"`
	PromiseTags    map[string]string `json:"promiseTags"`
	PromiseTimeout int64             `json:"promiseTimeout"`
	Tags           map[string]string `json:"tags"`
}

// Task defines model for Task.
type Task struct {
	CompletedOn *int64  `json:"completedOn,omitempty"`
	Counter     int     `json:"counter"`
	CreatedOn   *int64  `json:"createdOn,omitempty"`
	Id          string  `json:"id"`
	ProcessId   *string `json:"processId,omitempty"`
	Timeout     int64   `json:"timeout"`
}

// Value defines model for Value.
type Value struct {
	Data    *string            `json:"data,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
}

// CreateCallbackJSONBody defines parameters for CreateCallback.
type CreateCallbackJSONBody struct {
	Id            string `json:"id"`
	PromiseId     string `json:"promiseId"`
	Recv          Recv   `json:"recv"`
	RootPromiseId string `json:"rootPromiseId"`
	Timeout       int64  `json:"timeout"`
}

// CreateCallbackParams defines parameters for CreateCallback.
type CreateCallbackParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// AcquireLockJSONBody defines parameters for AcquireLock.
type AcquireLockJSONBody struct {
	ExecutionId string `json:"executionId"`
	ProcessId   string `json:"processId"`
	ResourceId  string `json:"resourceId"`
	Ttl         int    `json:"ttl"`
}

// AcquireLockParams defines parameters for AcquireLock.
type AcquireLockParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// HeartbeatLocksJSONBody defines parameters for HeartbeatLocks.
type HeartbeatLocksJSONBody struct {
	ProcessId string `json:"processId"`
}

// HeartbeatLocksParams defines parameters for HeartbeatLocks.
type HeartbeatLocksParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// ReleaseLockJSONBody defines parameters for ReleaseLock.
type ReleaseLockJSONBody struct {
	ExecutionId string `json:"executionId"`
	ResourceId  string `json:"resourceId"`
}

// ReleaseLockParams defines parameters for ReleaseLock.
type ReleaseLockParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// SearchPromisesParams defines parameters for SearchPromises.
type SearchPromisesParams struct {
	// Id Search promises for matching ids, can include wildcards.
	//
	// For example:
	// - "foo/*" matches all ids starting with "foo/"
	// - "*/bar" matches all ids ending with "bar/"
	// - "foo/*/bar" matches all ids starting with "foo/" and ending with "/bar"
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// State Search promises for matching states
	State *SearchPromisesParamsState `form:"state,omitempty" json:"state,omitempty"`
	Tags  *map[string]string         `json:"tags,omitempty"`

	// Limit Number of results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Cursor for pagination
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// SearchPromisesParamsState defines parameters for SearchPromises.
type SearchPromisesParamsState string

// CreatePromiseJSONBody defines parameters for CreatePromise.
type CreatePromiseJSONBody struct {
	Id      string             `json:"id"`
	Param   *Value             `json:"param,omitempty"`
	Tags    *map[string]string `json:"tags,omitempty"`
	Timeout int64              `json:"timeout"`
}

// CreatePromiseParams defines parameters for CreatePromise.
type CreatePromiseParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates requests
	IdempotencyKey *string `json:"idempotency-key,omitempty"`

	// Strict If true, deduplicates only when promise state matches the request
	Strict *bool `json:"strict,omitempty"`
}

// CreatePromiseAndTaskJSONBody defines parameters for CreatePromiseAndTask.
type CreatePromiseAndTaskJSONBody struct {
	Promise struct {
		Id      string             `json:"id"`
		Param   *Value             `json:"param,omitempty"`
		Tags    *map[string]string `json:"tags,omitempty"`
		Timeout int64              `json:"timeout"`
	} `json:"promise"`
	Task struct {
		ProcessId string                 `json:"processId"`
		Recv      map[string]interface{} `json:"recv"`
		Ttl       int                    `json:"ttl"`
	} `json:"task"`
}

// CreatePromiseAndTaskParams defines parameters for CreatePromiseAndTask.
type CreatePromiseAndTaskParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates requests
	IdempotencyKey *string `json:"idempotency-key,omitempty"`

	// Strict If true, deduplicates only when promise state matches the request
	Strict *bool `json:"strict,omitempty"`
}

// ReadPromiseParams defines parameters for ReadPromise.
type ReadPromiseParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// CompletePromiseJSONBody defines parameters for CompletePromise.
type CompletePromiseJSONBody struct {
	State CompletePromiseJSONBodyState `json:"state"`
	Value *Value                       `json:"value,omitempty"`
}

// CompletePromiseParams defines parameters for CompletePromise.
type CompletePromiseParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates requests
	IdempotencyKey *string `json:"idempotency-key,omitempty"`

	// Strict If true, deduplicates only when promise state matches the request
	Strict *bool `json:"strict,omitempty"`
}

// CompletePromiseJSONBodyState defines parameters for CompletePromise.
type CompletePromiseJSONBodyState string

// SearchSchedulesParams defines parameters for SearchSchedules.
type SearchSchedulesParams struct {
	// Id Search schedules for matching ids, can include wildcards.
	//
	// For example:
	// - "foo/*" matches all ids starting with "foo/"
	// - "*/bar" matches all ids ending with "bar/"
	// - "foo/*/bar" matches all ids starting with "foo/" and ending with "/bar"
	Id   *string            `form:"id,omitempty" json:"id,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`

	// Limit Number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor Cursor for pagination
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// CreateScheduleJSONBody defines parameters for CreateSchedule.
type CreateScheduleJSONBody struct {
	Cron           *string            `json:"cron,omitempty"`
	Description    *string            `json:"description,omitempty"`
	Id             *string            `json:"id,omitempty"`
	IdempotencyKey *string            `json:"idempotencyKey,omitempty"`
	PromiseId      *string            `json:"promiseId,omitempty"`
	PromiseParam   *Value             `json:"promiseParam,omitempty"`
	PromiseTags    *map[string]string `json:"promiseTags,omitempty"`
	PromiseTimeout *int64             `json:"promiseTimeout,omitempty"`
	Tags           *map[string]string `json:"tags,omitempty"`
}

// CreateScheduleParams defines parameters for CreateSchedule.
type CreateScheduleParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates requests
	IdempotencyKey *string `json:"idempotency-key,omitempty"`
}

// DeleteScheduleParams defines parameters for DeleteSchedule.
type DeleteScheduleParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// ReadScheduleParams defines parameters for ReadSchedule.
type ReadScheduleParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// ClaimTaskJSONBody defines parameters for ClaimTask.
type ClaimTaskJSONBody struct {
	// Counter The task counter
	Counter int `json:"counter"`

	// Id The task id
	Id string `json:"id"`

	// ProcessId Unique process id that identifies the claimer
	ProcessId string `json:"processId"`

	// Ttl Time to live in milliseconds
	Ttl int64 `json:"ttl"`
}

// ClaimTaskParams defines parameters for ClaimTask.
type ClaimTaskParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// ClaimTaskGetParams defines parameters for ClaimTaskGet.
type ClaimTaskGetParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// CompleteTaskJSONBody defines parameters for CompleteTask.
type CompleteTaskJSONBody struct {
	// Counter The task counter
	Counter int `json:"counter"`

	// Id The task id
	Id string `json:"id"`
}

// CompleteTaskGetParams defines parameters for CompleteTaskGet.
type CompleteTaskGetParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// HeartbeatTasksJSONBody defines parameters for HeartbeatTasks.
type HeartbeatTasksJSONBody struct {
	ProcessId string `json:"processId"`
}

// HeartbeatTasksParams defines parameters for HeartbeatTasks.
type HeartbeatTasksParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// HeartbeatTaskGetParams defines parameters for HeartbeatTaskGet.
type HeartbeatTaskGetParams struct {
	// RequestId Unique tracking id
	RequestId *string `json:"request-id,omitempty"`
}

// CreateCallbackJSONRequestBody defines body for CreateCallback for application/json ContentType.
type CreateCallbackJSONRequestBody CreateCallbackJSONBody

// AcquireLockJSONRequestBody defines body for AcquireLock for application/json ContentType.
type AcquireLockJSONRequestBody AcquireLockJSONBody

// HeartbeatLocksJSONRequestBody defines body for HeartbeatLocks for application/json ContentType.
type HeartbeatLocksJSONRequestBody HeartbeatLocksJSONBody

// ReleaseLockJSONRequestBody defines body for ReleaseLock for application/json ContentType.
type ReleaseLockJSONRequestBody ReleaseLockJSONBody

// CreatePromiseJSONRequestBody defines body for CreatePromise for application/json ContentType.
type CreatePromiseJSONRequestBody CreatePromiseJSONBody

// CreatePromiseAndTaskJSONRequestBody defines body for CreatePromiseAndTask for application/json ContentType.
type CreatePromiseAndTaskJSONRequestBody CreatePromiseAndTaskJSONBody

// CompletePromiseJSONRequestBody defines body for CompletePromise for application/json ContentType.
type CompletePromiseJSONRequestBody CompletePromiseJSONBody

// CreateScheduleJSONRequestBody defines body for CreateSchedule for application/json ContentType.
type CreateScheduleJSONRequestBody CreateScheduleJSONBody

// ClaimTaskJSONRequestBody defines body for ClaimTask for application/json ContentType.
type ClaimTaskJSONRequestBody ClaimTaskJSONBody

// CompleteTaskJSONRequestBody defines body for CompleteTask for application/json ContentType.
type CompleteTaskJSONRequestBody CompleteTaskJSONBody

// HeartbeatTasksJSONRequestBody defines body for HeartbeatTasks for application/json ContentType.
type HeartbeatTasksJSONRequestBody HeartbeatTasksJSONBody

// AsRecv0 returns the union data inside the Recv as a Recv0
func (t Recv) AsRecv0() (Recv0, error) {
	var body Recv0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecv0 overwrites any union data inside the Recv as the provided Recv0
func (t *Recv) FromRecv0(v Recv0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecv0 performs a merge with any union data inside the Recv, using the provided Recv0
func (t *Recv) MergeRecv0(v Recv0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecv1 returns the union data inside the Recv as a Recv1
func (t Recv) AsRecv1() (Recv1, error) {
	var body Recv1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecv1 overwrites any union data inside the Recv as the provided Recv1
func (t *Recv) FromRecv1(v Recv1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecv1 performs a merge with any union data inside the Recv, using the provided Recv1
func (t *Recv) MergeRecv1(v Recv1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Recv) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Recv) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateCallbackWithBody request with any body
	CreateCallbackWithBody(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCallback(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcquireLockWithBody request with any body
	AcquireLockWithBody(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcquireLock(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeartbeatLocksWithBody request with any body
	HeartbeatLocksWithBody(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HeartbeatLocks(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseLockWithBody request with any body
	ReleaseLockWithBody(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleaseLock(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPromises request
	SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePromiseWithBody request with any body
	CreatePromiseWithBody(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePromise(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePromiseAndTaskWithBody request with any body
	CreatePromiseAndTaskWithBody(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePromiseAndTask(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPromise request
	ReadPromise(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompletePromiseWithBody request with any body
	CompletePromiseWithBody(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompletePromise(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSchedules request
	SearchSchedules(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleWithBody request with any body
	CreateScheduleWithBody(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSchedule(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSchedule request
	DeleteSchedule(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSchedule request
	ReadSchedule(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClaimTaskWithBody request with any body
	ClaimTaskWithBody(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClaimTask(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClaimTaskGet request
	ClaimTaskGet(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteTaskWithBody request with any body
	CompleteTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteTask(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteTaskGet request
	CompleteTaskGet(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeartbeatTasksWithBody request with any body
	HeartbeatTasksWithBody(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HeartbeatTasks(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeartbeatTaskGet request
	HeartbeatTaskGet(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateCallbackWithBody(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallbackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCallback(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallbackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcquireLockWithBody(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcquireLockRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcquireLock(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcquireLockRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeartbeatLocksWithBody(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeartbeatLocksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeartbeatLocks(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeartbeatLocksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseLockWithBody(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseLockRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseLock(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseLockRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPromisesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromiseWithBody(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromise(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromiseAndTaskWithBody(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseAndTaskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromiseAndTask(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseAndTaskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPromise(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPromiseRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompletePromiseWithBody(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompletePromiseRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompletePromise(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompletePromiseRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSchedules(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleWithBody(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSchedule(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSchedule(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduleRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSchedule(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadScheduleRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimTaskWithBody(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimTaskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimTask(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimTaskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimTaskGet(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimTaskGetRequest(c.Server, id, counter, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteTask(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteTaskGet(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteTaskGetRequest(c.Server, id, counter, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeartbeatTasksWithBody(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeartbeatTasksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeartbeatTasks(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeartbeatTasksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeartbeatTaskGet(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeartbeatTaskGetRequest(c.Server, id, counter, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateCallbackRequest calls the generic CreateCallback builder with application/json body
func NewCreateCallbackRequest(server string, params *CreateCallbackParams, body CreateCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCallbackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCallbackRequestWithBody generates requests for CreateCallback with any type of body
func NewCreateCallbackRequestWithBody(server string, params *CreateCallbackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewAcquireLockRequest calls the generic AcquireLock builder with application/json body
func NewAcquireLockRequest(server string, params *AcquireLockParams, body AcquireLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcquireLockRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAcquireLockRequestWithBody generates requests for AcquireLock with any type of body
func NewAcquireLockRequestWithBody(server string, params *AcquireLockParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locks/acquire")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewHeartbeatLocksRequest calls the generic HeartbeatLocks builder with application/json body
func NewHeartbeatLocksRequest(server string, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHeartbeatLocksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewHeartbeatLocksRequestWithBody generates requests for HeartbeatLocks with any type of body
func NewHeartbeatLocksRequestWithBody(server string, params *HeartbeatLocksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locks/heartbeat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewReleaseLockRequest calls the generic ReleaseLock builder with application/json body
func NewReleaseLockRequest(server string, params *ReleaseLockParams, body ReleaseLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleaseLockRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReleaseLockRequestWithBody generates requests for ReleaseLock with any type of body
func NewReleaseLockRequestWithBody(server string, params *ReleaseLockParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locks/release")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewSearchPromisesRequest generates requests for SearchPromises
func NewSearchPromisesRequest(server string, params *SearchPromisesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewCreatePromiseRequest calls the generic CreatePromise builder with application/json body
func NewCreatePromiseRequest(server string, params *CreatePromiseParams, body CreatePromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePromiseRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePromiseRequestWithBody generates requests for CreatePromise with any type of body
func NewCreatePromiseRequestWithBody(server string, params *CreatePromiseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

		if params.Strict != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "strict", runtime.ParamLocationHeader, *params.Strict)
			if err != nil {
				return nil, err
			}

			req.Header.Set("strict", headerParam2)
		}

	}

	return req, nil
}

// NewCreatePromiseAndTaskRequest calls the generic CreatePromiseAndTask builder with application/json body
func NewCreatePromiseAndTaskRequest(server string, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePromiseAndTaskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePromiseAndTaskRequestWithBody generates requests for CreatePromiseAndTask with any type of body
func NewCreatePromiseAndTaskRequestWithBody(server string, params *CreatePromiseAndTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

		if params.Strict != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "strict", runtime.ParamLocationHeader, *params.Strict)
			if err != nil {
				return nil, err
			}

			req.Header.Set("strict", headerParam2)
		}

	}

	return req, nil
}

// NewReadPromiseRequest generates requests for ReadPromise
func NewReadPromiseRequest(server string, id string, params *ReadPromiseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewCompletePromiseRequest calls the generic CompletePromise builder with application/json body
func NewCompletePromiseRequest(server string, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompletePromiseRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCompletePromiseRequestWithBody generates requests for CompletePromise with any type of body
func NewCompletePromiseRequestWithBody(server string, id string, params *CompletePromiseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

		if params.Strict != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "strict", runtime.ParamLocationHeader, *params.Strict)
			if err != nil {
				return nil, err
			}

			req.Header.Set("strict", headerParam2)
		}

	}

	return req, nil
}

// NewSearchSchedulesRequest generates requests for SearchSchedules
func NewSearchSchedulesRequest(server string, params *SearchSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewCreateScheduleRequest calls the generic CreateSchedule builder with application/json body
func NewCreateScheduleRequest(server string, params *CreateScheduleParams, body CreateScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateScheduleRequestWithBody generates requests for CreateSchedule with any type of body
func NewCreateScheduleRequestWithBody(server string, params *CreateScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteScheduleRequest generates requests for DeleteSchedule
func NewDeleteScheduleRequest(server string, id string, params *DeleteScheduleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewReadScheduleRequest generates requests for ReadSchedule
func NewReadScheduleRequest(server string, id string, params *ReadScheduleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewClaimTaskRequest calls the generic ClaimTask builder with application/json body
func NewClaimTaskRequest(server string, params *ClaimTaskParams, body ClaimTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClaimTaskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewClaimTaskRequestWithBody generates requests for ClaimTask with any type of body
func NewClaimTaskRequestWithBody(server string, params *ClaimTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/claim")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewClaimTaskGetRequest generates requests for ClaimTaskGet
func NewClaimTaskGetRequest(server string, id string, counter int, params *ClaimTaskGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "counter", runtime.ParamLocationPath, counter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/claim/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewCompleteTaskRequest calls the generic CompleteTask builder with application/json body
func NewCompleteTaskRequest(server string, body CompleteTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteTaskRequestWithBody generates requests for CompleteTask with any type of body
func NewCompleteTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteTaskGetRequest generates requests for CompleteTaskGet
func NewCompleteTaskGetRequest(server string, id string, counter int, params *CompleteTaskGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "counter", runtime.ParamLocationPath, counter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/complete/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewHeartbeatTasksRequest calls the generic HeartbeatTasks builder with application/json body
func NewHeartbeatTasksRequest(server string, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHeartbeatTasksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewHeartbeatTasksRequestWithBody generates requests for HeartbeatTasks with any type of body
func NewHeartbeatTasksRequestWithBody(server string, params *HeartbeatTasksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/heartbeat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

// NewHeartbeatTaskGetRequest generates requests for HeartbeatTaskGet
func NewHeartbeatTaskGetRequest(server string, id string, counter int, params *HeartbeatTaskGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "counter", runtime.ParamLocationPath, counter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/heartbeat/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateCallbackWithBodyWithResponse request with any body
	CreateCallbackWithBodyWithResponse(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error)

	CreateCallbackWithResponse(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error)

	// AcquireLockWithBodyWithResponse request with any body
	AcquireLockWithBodyWithResponse(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error)

	AcquireLockWithResponse(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error)

	// HeartbeatLocksWithBodyWithResponse request with any body
	HeartbeatLocksWithBodyWithResponse(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error)

	HeartbeatLocksWithResponse(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error)

	// ReleaseLockWithBodyWithResponse request with any body
	ReleaseLockWithBodyWithResponse(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error)

	ReleaseLockWithResponse(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error)

	// SearchPromisesWithResponse request
	SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error)

	// CreatePromiseWithBodyWithResponse request with any body
	CreatePromiseWithBodyWithResponse(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	CreatePromiseWithResponse(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	// CreatePromiseAndTaskWithBodyWithResponse request with any body
	CreatePromiseAndTaskWithBodyWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error)

	CreatePromiseAndTaskWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error)

	// ReadPromiseWithResponse request
	ReadPromiseWithResponse(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*ReadPromiseResponse, error)

	// CompletePromiseWithBodyWithResponse request with any body
	CompletePromiseWithBodyWithResponse(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error)

	CompletePromiseWithResponse(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error)

	// SearchSchedulesWithResponse request
	SearchSchedulesWithResponse(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*SearchSchedulesResponse, error)

	// CreateScheduleWithBodyWithResponse request with any body
	CreateScheduleWithBodyWithResponse(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	CreateScheduleWithResponse(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	// DeleteScheduleWithResponse request
	DeleteScheduleWithResponse(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*DeleteScheduleResponse, error)

	// ReadScheduleWithResponse request
	ReadScheduleWithResponse(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*ReadScheduleResponse, error)

	// ClaimTaskWithBodyWithResponse request with any body
	ClaimTaskWithBodyWithResponse(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error)

	ClaimTaskWithResponse(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error)

	// ClaimTaskGetWithResponse request
	ClaimTaskGetWithResponse(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*ClaimTaskGetResponse, error)

	// CompleteTaskWithBodyWithResponse request with any body
	CompleteTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error)

	CompleteTaskWithResponse(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error)

	// CompleteTaskGetWithResponse request
	CompleteTaskGetWithResponse(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*CompleteTaskGetResponse, error)

	// HeartbeatTasksWithBodyWithResponse request with any body
	HeartbeatTasksWithBodyWithResponse(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error)

	HeartbeatTasksWithResponse(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error)

	// HeartbeatTaskGetWithResponse request
	HeartbeatTaskGetWithResponse(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*HeartbeatTaskGetResponse, error)
}

type CreateCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Promise *Promise `json:"promise,omitempty"`
	}
	JSON201 *struct {
		Callback *Callback `json:"callback,omitempty"`
		Promise  *Promise  `json:"promise,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcquireLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Lock
}

// Status returns HTTPResponse.Status
func (r AcquireLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcquireLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeartbeatLocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		LocksAffected *int64 `json:"locksAffected,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HeartbeatLocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeartbeatLocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReleaseLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPromisesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cursor   *string    `json:"cursor,omitempty"`
		Promises *[]Promise `json:"promises,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchPromisesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPromisesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
}

// Status returns HTTPResponse.Status
func (r CreatePromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePromiseAndTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Promise *Promise `json:"promise,omitempty"`
	}
	JSON201 *struct {
		Promise *Promise `json:"promise,omitempty"`
		Task    *Task    `json:"task,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePromiseAndTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePromiseAndTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
}

// Status returns HTTPResponse.Status
func (r ReadPromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompletePromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
}

// Status returns HTTPResponse.Status
func (r CompletePromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompletePromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cursor    *string     `json:"cursor,omitempty"`
		Schedules *[]Schedule `json:"schedules,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cron           string             `json:"cron"`
		Description    *string            `json:"description,omitempty"`
		Id             string             `json:"id"`
		IdempotencyKey *string            `json:"idempotencyKey,omitempty"`
		PromiseId      string             `json:"promiseId"`
		PromiseParam   *Value             `json:"promiseParam,omitempty"`
		PromiseTags    *map[string]string `json:"promiseTags,omitempty"`
		PromiseTimeout int64              `json:"promiseTimeout"`
		Tags           *map[string]string `json:"tags,omitempty"`
	}
	JSON201 *Schedule
}

// Status returns HTTPResponse.Status
func (r CreateScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
}

// Status returns HTTPResponse.Status
func (r ReadScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClaimTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Mesg
}

// Status returns HTTPResponse.Status
func (r ClaimTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClaimTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClaimTaskGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Mesg
}

// Status returns HTTPResponse.Status
func (r ClaimTaskGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClaimTaskGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r CompleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteTaskGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r CompleteTaskGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteTaskGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeartbeatTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TasksAffected *int64 `json:"tasksAffected,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HeartbeatTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeartbeatTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeartbeatTaskGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TasksAffected *int64 `json:"tasksAffected,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HeartbeatTaskGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeartbeatTaskGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateCallbackWithBodyWithResponse request with arbitrary body returning *CreateCallbackResponse
func (c *ClientWithResponses) CreateCallbackWithBodyWithResponse(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error) {
	rsp, err := c.CreateCallbackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallbackResponse(rsp)
}

func (c *ClientWithResponses) CreateCallbackWithResponse(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error) {
	rsp, err := c.CreateCallback(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallbackResponse(rsp)
}

// AcquireLockWithBodyWithResponse request with arbitrary body returning *AcquireLockResponse
func (c *ClientWithResponses) AcquireLockWithBodyWithResponse(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error) {
	rsp, err := c.AcquireLockWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcquireLockResponse(rsp)
}

func (c *ClientWithResponses) AcquireLockWithResponse(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error) {
	rsp, err := c.AcquireLock(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcquireLockResponse(rsp)
}

// HeartbeatLocksWithBodyWithResponse request with arbitrary body returning *HeartbeatLocksResponse
func (c *ClientWithResponses) HeartbeatLocksWithBodyWithResponse(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error) {
	rsp, err := c.HeartbeatLocksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeartbeatLocksResponse(rsp)
}

func (c *ClientWithResponses) HeartbeatLocksWithResponse(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error) {
	rsp, err := c.HeartbeatLocks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeartbeatLocksResponse(rsp)
}

// ReleaseLockWithBodyWithResponse request with arbitrary body returning *ReleaseLockResponse
func (c *ClientWithResponses) ReleaseLockWithBodyWithResponse(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error) {
	rsp, err := c.ReleaseLockWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseLockResponse(rsp)
}

func (c *ClientWithResponses) ReleaseLockWithResponse(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error) {
	rsp, err := c.ReleaseLock(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseLockResponse(rsp)
}

// SearchPromisesWithResponse request returning *SearchPromisesResponse
func (c *ClientWithResponses) SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error) {
	rsp, err := c.SearchPromises(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPromisesResponse(rsp)
}

// CreatePromiseWithBodyWithResponse request with arbitrary body returning *CreatePromiseResponse
func (c *ClientWithResponses) CreatePromiseWithBodyWithResponse(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromiseWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

func (c *ClientWithResponses) CreatePromiseWithResponse(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromise(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

// CreatePromiseAndTaskWithBodyWithResponse request with arbitrary body returning *CreatePromiseAndTaskResponse
func (c *ClientWithResponses) CreatePromiseAndTaskWithBodyWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error) {
	rsp, err := c.CreatePromiseAndTaskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseAndTaskResponse(rsp)
}

func (c *ClientWithResponses) CreatePromiseAndTaskWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error) {
	rsp, err := c.CreatePromiseAndTask(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseAndTaskResponse(rsp)
}

// ReadPromiseWithResponse request returning *ReadPromiseResponse
func (c *ClientWithResponses) ReadPromiseWithResponse(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*ReadPromiseResponse, error) {
	rsp, err := c.ReadPromise(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPromiseResponse(rsp)
}

// CompletePromiseWithBodyWithResponse request with arbitrary body returning *CompletePromiseResponse
func (c *ClientWithResponses) CompletePromiseWithBodyWithResponse(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error) {
	rsp, err := c.CompletePromiseWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompletePromiseResponse(rsp)
}

func (c *ClientWithResponses) CompletePromiseWithResponse(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error) {
	rsp, err := c.CompletePromise(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompletePromiseResponse(rsp)
}

// SearchSchedulesWithResponse request returning *SearchSchedulesResponse
func (c *ClientWithResponses) SearchSchedulesWithResponse(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*SearchSchedulesResponse, error) {
	rsp, err := c.SearchSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSchedulesResponse(rsp)
}

// CreateScheduleWithBodyWithResponse request with arbitrary body returning *CreateScheduleResponse
func (c *ClientWithResponses) CreateScheduleWithBodyWithResponse(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateScheduleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleWithResponse(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateSchedule(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

// DeleteScheduleWithResponse request returning *DeleteScheduleResponse
func (c *ClientWithResponses) DeleteScheduleWithResponse(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*DeleteScheduleResponse, error) {
	rsp, err := c.DeleteSchedule(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduleResponse(rsp)
}

// ReadScheduleWithResponse request returning *ReadScheduleResponse
func (c *ClientWithResponses) ReadScheduleWithResponse(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*ReadScheduleResponse, error) {
	rsp, err := c.ReadSchedule(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadScheduleResponse(rsp)
}

// ClaimTaskWithBodyWithResponse request with arbitrary body returning *ClaimTaskResponse
func (c *ClientWithResponses) ClaimTaskWithBodyWithResponse(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error) {
	rsp, err := c.ClaimTaskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClaimTaskResponse(rsp)
}

func (c *ClientWithResponses) ClaimTaskWithResponse(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error) {
	rsp, err := c.ClaimTask(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClaimTaskResponse(rsp)
}

// ClaimTaskGetWithResponse request returning *ClaimTaskGetResponse
func (c *ClientWithResponses) ClaimTaskGetWithResponse(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*ClaimTaskGetResponse, error) {
	rsp, err := c.ClaimTaskGet(ctx, id, counter, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClaimTaskGetResponse(rsp)
}

// CompleteTaskWithBodyWithResponse request with arbitrary body returning *CompleteTaskResponse
func (c *ClientWithResponses) CompleteTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error) {
	rsp, err := c.CompleteTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteTaskResponse(rsp)
}

func (c *ClientWithResponses) CompleteTaskWithResponse(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error) {
	rsp, err := c.CompleteTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteTaskResponse(rsp)
}

// CompleteTaskGetWithResponse request returning *CompleteTaskGetResponse
func (c *ClientWithResponses) CompleteTaskGetWithResponse(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*CompleteTaskGetResponse, error) {
	rsp, err := c.CompleteTaskGet(ctx, id, counter, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteTaskGetResponse(rsp)
}

// HeartbeatTasksWithBodyWithResponse request with arbitrary body returning *HeartbeatTasksResponse
func (c *ClientWithResponses) HeartbeatTasksWithBodyWithResponse(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error) {
	rsp, err := c.HeartbeatTasksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeartbeatTasksResponse(rsp)
}

func (c *ClientWithResponses) HeartbeatTasksWithResponse(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error) {
	rsp, err := c.HeartbeatTasks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeartbeatTasksResponse(rsp)
}

// HeartbeatTaskGetWithResponse request returning *HeartbeatTaskGetResponse
func (c *ClientWithResponses) HeartbeatTaskGetWithResponse(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*HeartbeatTaskGetResponse, error) {
	rsp, err := c.HeartbeatTaskGet(ctx, id, counter, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeartbeatTaskGetResponse(rsp)
}

// ParseCreateCallbackResponse parses an HTTP response from a CreateCallbackWithResponse call
func ParseCreateCallbackResponse(rsp *http.Response) (*CreateCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Promise *Promise `json:"promise,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Callback *Callback `json:"callback,omitempty"`
			Promise  *Promise  `json:"promise,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAcquireLockResponse parses an HTTP response from a AcquireLockWithResponse call
func ParseAcquireLockResponse(rsp *http.Response) (*AcquireLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcquireLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Lock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseHeartbeatLocksResponse parses an HTTP response from a HeartbeatLocksWithResponse call
func ParseHeartbeatLocksResponse(rsp *http.Response) (*HeartbeatLocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeartbeatLocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			LocksAffected *int64 `json:"locksAffected,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReleaseLockResponse parses an HTTP response from a ReleaseLockWithResponse call
func ParseReleaseLockResponse(rsp *http.Response) (*ReleaseLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchPromisesResponse parses an HTTP response from a SearchPromisesWithResponse call
func ParseSearchPromisesResponse(rsp *http.Response) (*SearchPromisesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPromisesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cursor   *string    `json:"cursor,omitempty"`
			Promises *[]Promise `json:"promises,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePromiseResponse parses an HTTP response from a CreatePromiseWithResponse call
func ParseCreatePromiseResponse(rsp *http.Response) (*CreatePromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreatePromiseAndTaskResponse parses an HTTP response from a CreatePromiseAndTaskWithResponse call
func ParseCreatePromiseAndTaskResponse(rsp *http.Response) (*CreatePromiseAndTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePromiseAndTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Promise *Promise `json:"promise,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Promise *Promise `json:"promise,omitempty"`
			Task    *Task    `json:"task,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReadPromiseResponse parses an HTTP response from a ReadPromiseWithResponse call
func ParseReadPromiseResponse(rsp *http.Response) (*ReadPromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCompletePromiseResponse parses an HTTP response from a CompletePromiseWithResponse call
func ParseCompletePromiseResponse(rsp *http.Response) (*CompletePromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompletePromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSchedulesResponse parses an HTTP response from a SearchSchedulesWithResponse call
func ParseSearchSchedulesResponse(rsp *http.Response) (*SearchSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cursor    *string     `json:"cursor,omitempty"`
			Schedules *[]Schedule `json:"schedules,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateScheduleResponse parses an HTTP response from a CreateScheduleWithResponse call
func ParseCreateScheduleResponse(rsp *http.Response) (*CreateScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cron           string             `json:"cron"`
			Description    *string            `json:"description,omitempty"`
			Id             string             `json:"id"`
			IdempotencyKey *string            `json:"idempotencyKey,omitempty"`
			PromiseId      string             `json:"promiseId"`
			PromiseParam   *Value             `json:"promiseParam,omitempty"`
			PromiseTags    *map[string]string `json:"promiseTags,omitempty"`
			PromiseTimeout int64              `json:"promiseTimeout"`
			Tags           *map[string]string `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteScheduleResponse parses an HTTP response from a DeleteScheduleWithResponse call
func ParseDeleteScheduleResponse(rsp *http.Response) (*DeleteScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReadScheduleResponse parses an HTTP response from a ReadScheduleWithResponse call
func ParseReadScheduleResponse(rsp *http.Response) (*ReadScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClaimTaskResponse parses an HTTP response from a ClaimTaskWithResponse call
func ParseClaimTaskResponse(rsp *http.Response) (*ClaimTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClaimTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Mesg
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseClaimTaskGetResponse parses an HTTP response from a ClaimTaskGetWithResponse call
func ParseClaimTaskGetResponse(rsp *http.Response) (*ClaimTaskGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClaimTaskGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Mesg
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCompleteTaskResponse parses an HTTP response from a CompleteTaskWithResponse call
func ParseCompleteTaskResponse(rsp *http.Response) (*CompleteTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCompleteTaskGetResponse parses an HTTP response from a CompleteTaskGetWithResponse call
func ParseCompleteTaskGetResponse(rsp *http.Response) (*CompleteTaskGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteTaskGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseHeartbeatTasksResponse parses an HTTP response from a HeartbeatTasksWithResponse call
func ParseHeartbeatTasksResponse(rsp *http.Response) (*HeartbeatTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeartbeatTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TasksAffected *int64 `json:"tasksAffected,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeartbeatTaskGetResponse parses an HTTP response from a HeartbeatTaskGetWithResponse call
func ParseHeartbeatTaskGetResponse(rsp *http.Response) (*HeartbeatTaskGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeartbeatTaskGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TasksAffected *int64 `json:"tasksAffected,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
