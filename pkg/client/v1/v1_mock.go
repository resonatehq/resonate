// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/v1/v1.go
//
// Generated by this command:
//
//	mockgen -package v1 -source=pkg/client/v1/v1.go -destination=pkg/client/v1/v1_mock.go
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AcquireLock mocks base method.
func (m *MockClientInterface) AcquireLock(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcquireLock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLock indicates an expected call of AcquireLock.
func (mr *MockClientInterfaceMockRecorder) AcquireLock(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLock", reflect.TypeOf((*MockClientInterface)(nil).AcquireLock), varargs...)
}

// AcquireLockWithBody mocks base method.
func (m *MockClientInterface) AcquireLockWithBody(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcquireLockWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLockWithBody indicates an expected call of AcquireLockWithBody.
func (mr *MockClientInterfaceMockRecorder) AcquireLockWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLockWithBody", reflect.TypeOf((*MockClientInterface)(nil).AcquireLockWithBody), varargs...)
}

// ClaimTask mocks base method.
func (m *MockClientInterface) ClaimTask(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTask", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTask indicates an expected call of ClaimTask.
func (mr *MockClientInterfaceMockRecorder) ClaimTask(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTask", reflect.TypeOf((*MockClientInterface)(nil).ClaimTask), varargs...)
}

// ClaimTaskGet mocks base method.
func (m *MockClientInterface) ClaimTaskGet(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTaskGet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTaskGet indicates an expected call of ClaimTaskGet.
func (mr *MockClientInterfaceMockRecorder) ClaimTaskGet(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTaskGet", reflect.TypeOf((*MockClientInterface)(nil).ClaimTaskGet), varargs...)
}

// ClaimTaskWithBody mocks base method.
func (m *MockClientInterface) ClaimTaskWithBody(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTaskWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTaskWithBody indicates an expected call of ClaimTaskWithBody.
func (mr *MockClientInterfaceMockRecorder) ClaimTaskWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTaskWithBody", reflect.TypeOf((*MockClientInterface)(nil).ClaimTaskWithBody), varargs...)
}

// CompletePromise mocks base method.
func (m *MockClientInterface) CompletePromise(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompletePromise", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletePromise indicates an expected call of CompletePromise.
func (mr *MockClientInterfaceMockRecorder) CompletePromise(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePromise", reflect.TypeOf((*MockClientInterface)(nil).CompletePromise), varargs...)
}

// CompletePromiseWithBody mocks base method.
func (m *MockClientInterface) CompletePromiseWithBody(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompletePromiseWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletePromiseWithBody indicates an expected call of CompletePromiseWithBody.
func (mr *MockClientInterfaceMockRecorder) CompletePromiseWithBody(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePromiseWithBody", reflect.TypeOf((*MockClientInterface)(nil).CompletePromiseWithBody), varargs...)
}

// CompleteTask mocks base method.
func (m *MockClientInterface) CompleteTask(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTask", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockClientInterfaceMockRecorder) CompleteTask(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockClientInterface)(nil).CompleteTask), varargs...)
}

// CompleteTaskGet mocks base method.
func (m *MockClientInterface) CompleteTaskGet(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTaskGet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTaskGet indicates an expected call of CompleteTaskGet.
func (mr *MockClientInterfaceMockRecorder) CompleteTaskGet(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTaskGet", reflect.TypeOf((*MockClientInterface)(nil).CompleteTaskGet), varargs...)
}

// CompleteTaskWithBody mocks base method.
func (m *MockClientInterface) CompleteTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTaskWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTaskWithBody indicates an expected call of CompleteTaskWithBody.
func (mr *MockClientInterfaceMockRecorder) CompleteTaskWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTaskWithBody", reflect.TypeOf((*MockClientInterface)(nil).CompleteTaskWithBody), varargs...)
}

// CreateCallback mocks base method.
func (m *MockClientInterface) CreateCallback(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCallback", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallback indicates an expected call of CreateCallback.
func (mr *MockClientInterfaceMockRecorder) CreateCallback(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallback", reflect.TypeOf((*MockClientInterface)(nil).CreateCallback), varargs...)
}

// CreateCallbackWithBody mocks base method.
func (m *MockClientInterface) CreateCallbackWithBody(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCallbackWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallbackWithBody indicates an expected call of CreateCallbackWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateCallbackWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallbackWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateCallbackWithBody), varargs...)
}

// CreatePromise mocks base method.
func (m *MockClientInterface) CreatePromise(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromise", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromise indicates an expected call of CreatePromise.
func (mr *MockClientInterfaceMockRecorder) CreatePromise(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromise", reflect.TypeOf((*MockClientInterface)(nil).CreatePromise), varargs...)
}

// CreatePromiseAndTask mocks base method.
func (m *MockClientInterface) CreatePromiseAndTask(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseAndTask", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseAndTask indicates an expected call of CreatePromiseAndTask.
func (mr *MockClientInterfaceMockRecorder) CreatePromiseAndTask(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseAndTask", reflect.TypeOf((*MockClientInterface)(nil).CreatePromiseAndTask), varargs...)
}

// CreatePromiseAndTaskWithBody mocks base method.
func (m *MockClientInterface) CreatePromiseAndTaskWithBody(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseAndTaskWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseAndTaskWithBody indicates an expected call of CreatePromiseAndTaskWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePromiseAndTaskWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseAndTaskWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePromiseAndTaskWithBody), varargs...)
}

// CreatePromiseWithBody mocks base method.
func (m *MockClientInterface) CreatePromiseWithBody(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseWithBody indicates an expected call of CreatePromiseWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePromiseWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePromiseWithBody), varargs...)
}

// CreateSchedule mocks base method.
func (m *MockClientInterface) CreateSchedule(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockClientInterfaceMockRecorder) CreateSchedule(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockClientInterface)(nil).CreateSchedule), varargs...)
}

// CreateScheduleWithBody mocks base method.
func (m *MockClientInterface) CreateScheduleWithBody(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleWithBody indicates an expected call of CreateScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateScheduleWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateScheduleWithBody), varargs...)
}

// DeleteSchedule mocks base method.
func (m *MockClientInterface) DeleteSchedule(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockClientInterfaceMockRecorder) DeleteSchedule(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockClientInterface)(nil).DeleteSchedule), varargs...)
}

// HeartbeatLocks mocks base method.
func (m *MockClientInterface) HeartbeatLocks(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatLocks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatLocks indicates an expected call of HeartbeatLocks.
func (mr *MockClientInterfaceMockRecorder) HeartbeatLocks(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatLocks", reflect.TypeOf((*MockClientInterface)(nil).HeartbeatLocks), varargs...)
}

// HeartbeatLocksWithBody mocks base method.
func (m *MockClientInterface) HeartbeatLocksWithBody(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatLocksWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatLocksWithBody indicates an expected call of HeartbeatLocksWithBody.
func (mr *MockClientInterfaceMockRecorder) HeartbeatLocksWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatLocksWithBody", reflect.TypeOf((*MockClientInterface)(nil).HeartbeatLocksWithBody), varargs...)
}

// HeartbeatTaskGet mocks base method.
func (m *MockClientInterface) HeartbeatTaskGet(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTaskGet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTaskGet indicates an expected call of HeartbeatTaskGet.
func (mr *MockClientInterfaceMockRecorder) HeartbeatTaskGet(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTaskGet", reflect.TypeOf((*MockClientInterface)(nil).HeartbeatTaskGet), varargs...)
}

// HeartbeatTasks mocks base method.
func (m *MockClientInterface) HeartbeatTasks(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTasks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTasks indicates an expected call of HeartbeatTasks.
func (mr *MockClientInterfaceMockRecorder) HeartbeatTasks(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTasks", reflect.TypeOf((*MockClientInterface)(nil).HeartbeatTasks), varargs...)
}

// HeartbeatTasksWithBody mocks base method.
func (m *MockClientInterface) HeartbeatTasksWithBody(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTasksWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTasksWithBody indicates an expected call of HeartbeatTasksWithBody.
func (mr *MockClientInterfaceMockRecorder) HeartbeatTasksWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTasksWithBody", reflect.TypeOf((*MockClientInterface)(nil).HeartbeatTasksWithBody), varargs...)
}

// ReadPromise mocks base method.
func (m *MockClientInterface) ReadPromise(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadPromise", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPromise indicates an expected call of ReadPromise.
func (mr *MockClientInterfaceMockRecorder) ReadPromise(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPromise", reflect.TypeOf((*MockClientInterface)(nil).ReadPromise), varargs...)
}

// ReadSchedule mocks base method.
func (m *MockClientInterface) ReadSchedule(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchedule indicates an expected call of ReadSchedule.
func (mr *MockClientInterfaceMockRecorder) ReadSchedule(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchedule", reflect.TypeOf((*MockClientInterface)(nil).ReadSchedule), varargs...)
}

// ReleaseLock mocks base method.
func (m *MockClientInterface) ReleaseLock(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockClientInterfaceMockRecorder) ReleaseLock(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockClientInterface)(nil).ReleaseLock), varargs...)
}

// ReleaseLockWithBody mocks base method.
func (m *MockClientInterface) ReleaseLockWithBody(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLockWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLockWithBody indicates an expected call of ReleaseLockWithBody.
func (mr *MockClientInterfaceMockRecorder) ReleaseLockWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockWithBody", reflect.TypeOf((*MockClientInterface)(nil).ReleaseLockWithBody), varargs...)
}

// SearchPromises mocks base method.
func (m *MockClientInterface) SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPromises", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPromises indicates an expected call of SearchPromises.
func (mr *MockClientInterfaceMockRecorder) SearchPromises(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPromises", reflect.TypeOf((*MockClientInterface)(nil).SearchPromises), varargs...)
}

// SearchSchedules mocks base method.
func (m *MockClientInterface) SearchSchedules(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSchedules indicates an expected call of SearchSchedules.
func (mr *MockClientInterfaceMockRecorder) SearchSchedules(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchedules", reflect.TypeOf((*MockClientInterface)(nil).SearchSchedules), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// AcquireLockWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AcquireLockWithBodyWithResponse(ctx context.Context, params *AcquireLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcquireLockWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*AcquireLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLockWithBodyWithResponse indicates an expected call of AcquireLockWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AcquireLockWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLockWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AcquireLockWithBodyWithResponse), varargs...)
}

// AcquireLockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AcquireLockWithResponse(ctx context.Context, params *AcquireLockParams, body AcquireLockJSONRequestBody, reqEditors ...RequestEditorFn) (*AcquireLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcquireLockWithResponse", varargs...)
	ret0, _ := ret[0].(*AcquireLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLockWithResponse indicates an expected call of AcquireLockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AcquireLockWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AcquireLockWithResponse), varargs...)
}

// ClaimTaskGetWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClaimTaskGetWithResponse(ctx context.Context, id string, counter int, params *ClaimTaskGetParams, reqEditors ...RequestEditorFn) (*ClaimTaskGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTaskGetWithResponse", varargs...)
	ret0, _ := ret[0].(*ClaimTaskGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTaskGetWithResponse indicates an expected call of ClaimTaskGetWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClaimTaskGetWithResponse(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTaskGetWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClaimTaskGetWithResponse), varargs...)
}

// ClaimTaskWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClaimTaskWithBodyWithResponse(ctx context.Context, params *ClaimTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTaskWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ClaimTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTaskWithBodyWithResponse indicates an expected call of ClaimTaskWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClaimTaskWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTaskWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClaimTaskWithBodyWithResponse), varargs...)
}

// ClaimTaskWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClaimTaskWithResponse(ctx context.Context, params *ClaimTaskParams, body ClaimTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*ClaimTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimTaskWithResponse", varargs...)
	ret0, _ := ret[0].(*ClaimTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimTaskWithResponse indicates an expected call of ClaimTaskWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClaimTaskWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimTaskWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClaimTaskWithResponse), varargs...)
}

// CompletePromiseWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CompletePromiseWithBodyWithResponse(ctx context.Context, id string, params *CompletePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompletePromiseWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CompletePromiseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletePromiseWithBodyWithResponse indicates an expected call of CompletePromiseWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CompletePromiseWithBodyWithResponse(ctx, id, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePromiseWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CompletePromiseWithBodyWithResponse), varargs...)
}

// CompletePromiseWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CompletePromiseWithResponse(ctx context.Context, id string, params *CompletePromiseParams, body CompletePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CompletePromiseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompletePromiseWithResponse", varargs...)
	ret0, _ := ret[0].(*CompletePromiseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletePromiseWithResponse indicates an expected call of CompletePromiseWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CompletePromiseWithResponse(ctx, id, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePromiseWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CompletePromiseWithResponse), varargs...)
}

// CompleteTaskGetWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CompleteTaskGetWithResponse(ctx context.Context, id string, counter int, params *CompleteTaskGetParams, reqEditors ...RequestEditorFn) (*CompleteTaskGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTaskGetWithResponse", varargs...)
	ret0, _ := ret[0].(*CompleteTaskGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTaskGetWithResponse indicates an expected call of CompleteTaskGetWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CompleteTaskGetWithResponse(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTaskGetWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CompleteTaskGetWithResponse), varargs...)
}

// CompleteTaskWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CompleteTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTaskWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CompleteTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTaskWithBodyWithResponse indicates an expected call of CompleteTaskWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CompleteTaskWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTaskWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CompleteTaskWithBodyWithResponse), varargs...)
}

// CompleteTaskWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CompleteTaskWithResponse(ctx context.Context, body CompleteTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTaskWithResponse", varargs...)
	ret0, _ := ret[0].(*CompleteTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTaskWithResponse indicates an expected call of CompleteTaskWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CompleteTaskWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTaskWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CompleteTaskWithResponse), varargs...)
}

// CreateCallbackWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateCallbackWithBodyWithResponse(ctx context.Context, params *CreateCallbackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCallbackWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallbackWithBodyWithResponse indicates an expected call of CreateCallbackWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateCallbackWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallbackWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateCallbackWithBodyWithResponse), varargs...)
}

// CreateCallbackWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateCallbackWithResponse(ctx context.Context, params *CreateCallbackParams, body CreateCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCallbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCallbackWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallbackWithResponse indicates an expected call of CreateCallbackWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateCallbackWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallbackWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateCallbackWithResponse), varargs...)
}

// CreatePromiseAndTaskWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePromiseAndTaskWithBodyWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseAndTaskWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePromiseAndTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseAndTaskWithBodyWithResponse indicates an expected call of CreatePromiseAndTaskWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePromiseAndTaskWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseAndTaskWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePromiseAndTaskWithBodyWithResponse), varargs...)
}

// CreatePromiseAndTaskWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePromiseAndTaskWithResponse(ctx context.Context, params *CreatePromiseAndTaskParams, body CreatePromiseAndTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseAndTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseAndTaskWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePromiseAndTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseAndTaskWithResponse indicates an expected call of CreatePromiseAndTaskWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePromiseAndTaskWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseAndTaskWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePromiseAndTaskWithResponse), varargs...)
}

// CreatePromiseWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePromiseWithBodyWithResponse(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePromiseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseWithBodyWithResponse indicates an expected call of CreatePromiseWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePromiseWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePromiseWithBodyWithResponse), varargs...)
}

// CreatePromiseWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePromiseWithResponse(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePromiseWithResponse", varargs...)
	ret0, _ := ret[0].(*CreatePromiseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromiseWithResponse indicates an expected call of CreatePromiseWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePromiseWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromiseWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePromiseWithResponse), varargs...)
}

// CreateScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateScheduleWithBodyWithResponse(ctx context.Context, params *CreateScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScheduleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleWithBodyWithResponse indicates an expected call of CreateScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateScheduleWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateScheduleWithBodyWithResponse), varargs...)
}

// CreateScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateScheduleWithResponse(ctx context.Context, params *CreateScheduleParams, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*CreateScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleWithResponse indicates an expected call of CreateScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateScheduleWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateScheduleWithResponse), varargs...)
}

// DeleteScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteScheduleWithResponse(ctx context.Context, id string, params *DeleteScheduleParams, reqEditors ...RequestEditorFn) (*DeleteScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*DeleteScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteScheduleWithResponse indicates an expected call of DeleteScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteScheduleWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteScheduleWithResponse), varargs...)
}

// HeartbeatLocksWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeartbeatLocksWithBodyWithResponse(ctx context.Context, params *HeartbeatLocksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatLocksWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HeartbeatLocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatLocksWithBodyWithResponse indicates an expected call of HeartbeatLocksWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeartbeatLocksWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatLocksWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeartbeatLocksWithBodyWithResponse), varargs...)
}

// HeartbeatLocksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeartbeatLocksWithResponse(ctx context.Context, params *HeartbeatLocksParams, body HeartbeatLocksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatLocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatLocksWithResponse", varargs...)
	ret0, _ := ret[0].(*HeartbeatLocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatLocksWithResponse indicates an expected call of HeartbeatLocksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeartbeatLocksWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatLocksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeartbeatLocksWithResponse), varargs...)
}

// HeartbeatTaskGetWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeartbeatTaskGetWithResponse(ctx context.Context, id string, counter int, params *HeartbeatTaskGetParams, reqEditors ...RequestEditorFn) (*HeartbeatTaskGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, counter, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTaskGetWithResponse", varargs...)
	ret0, _ := ret[0].(*HeartbeatTaskGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTaskGetWithResponse indicates an expected call of HeartbeatTaskGetWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeartbeatTaskGetWithResponse(ctx, id, counter, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, counter, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTaskGetWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeartbeatTaskGetWithResponse), varargs...)
}

// HeartbeatTasksWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeartbeatTasksWithBodyWithResponse(ctx context.Context, params *HeartbeatTasksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTasksWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*HeartbeatTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTasksWithBodyWithResponse indicates an expected call of HeartbeatTasksWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeartbeatTasksWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTasksWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeartbeatTasksWithBodyWithResponse), varargs...)
}

// HeartbeatTasksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeartbeatTasksWithResponse(ctx context.Context, params *HeartbeatTasksParams, body HeartbeatTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*HeartbeatTasksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartbeatTasksWithResponse", varargs...)
	ret0, _ := ret[0].(*HeartbeatTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartbeatTasksWithResponse indicates an expected call of HeartbeatTasksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeartbeatTasksWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatTasksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeartbeatTasksWithResponse), varargs...)
}

// ReadPromiseWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ReadPromiseWithResponse(ctx context.Context, id string, params *ReadPromiseParams, reqEditors ...RequestEditorFn) (*ReadPromiseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadPromiseWithResponse", varargs...)
	ret0, _ := ret[0].(*ReadPromiseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPromiseWithResponse indicates an expected call of ReadPromiseWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ReadPromiseWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPromiseWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ReadPromiseWithResponse), varargs...)
}

// ReadScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ReadScheduleWithResponse(ctx context.Context, id string, params *ReadScheduleParams, reqEditors ...RequestEditorFn) (*ReadScheduleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadScheduleWithResponse", varargs...)
	ret0, _ := ret[0].(*ReadScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadScheduleWithResponse indicates an expected call of ReadScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ReadScheduleWithResponse(ctx, id, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ReadScheduleWithResponse), varargs...)
}

// ReleaseLockWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ReleaseLockWithBodyWithResponse(ctx context.Context, params *ReleaseLockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLockWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*ReleaseLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLockWithBodyWithResponse indicates an expected call of ReleaseLockWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ReleaseLockWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ReleaseLockWithBodyWithResponse), varargs...)
}

// ReleaseLockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ReleaseLockWithResponse(ctx context.Context, params *ReleaseLockParams, body ReleaseLockJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseLockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLockWithResponse", varargs...)
	ret0, _ := ret[0].(*ReleaseLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLockWithResponse indicates an expected call of ReleaseLockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ReleaseLockWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ReleaseLockWithResponse), varargs...)
}

// SearchPromisesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPromisesWithResponse", varargs...)
	ret0, _ := ret[0].(*SearchPromisesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPromisesWithResponse indicates an expected call of SearchPromisesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchPromisesWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPromisesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchPromisesWithResponse), varargs...)
}

// SearchSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SearchSchedulesWithResponse(ctx context.Context, params *SearchSchedulesParams, reqEditors ...RequestEditorFn) (*SearchSchedulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSchedulesWithResponse", varargs...)
	ret0, _ := ret[0].(*SearchSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSchedulesWithResponse indicates an expected call of SearchSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchSchedulesWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchSchedulesWithResponse), varargs...)
}
