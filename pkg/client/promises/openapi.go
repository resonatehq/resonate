// Package promises provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package promises

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for PromiseState.
const (
	PromiseStatePENDING          PromiseState = "PENDING"
	PromiseStateREJECTED         PromiseState = "REJECTED"
	PromiseStateREJECTEDCANCELED PromiseState = "REJECTED_CANCELED"
	PromiseStateREJECTEDTIMEDOUT PromiseState = "REJECTED_TIMEDOUT"
	PromiseStateRESOLVED         PromiseState = "RESOLVED"
)

// Defines values for PromiseStateComplete.
const (
	PromiseStateCompleteREJECTED         PromiseStateComplete = "REJECTED"
	PromiseStateCompleteREJECTEDCANCELED PromiseStateComplete = "REJECTED_CANCELED"
	PromiseStateCompleteRESOLVED         PromiseStateComplete = "RESOLVED"
)

// Promise defines model for Promise.
type Promise struct {
	CompletedOn               *int               `json:"completedOn,omitempty"`
	CreatedOn                 *int               `json:"createdOn,omitempty"`
	Id                        string             `json:"id"`
	IdempotencyKeyForComplete *string            `json:"idempotencyKeyForComplete,omitempty"`
	IdempotencyKeyForCreate   *string            `json:"idempotencyKeyForCreate,omitempty"`
	Param                     *PromiseValue      `json:"param,omitempty"`
	State                     *PromiseState      `json:"state,omitempty"`
	Tags                      *map[string]string `json:"tags,omitempty"`
	Timeout                   int64              `json:"timeout"`
	Value                     *PromiseValue      `json:"value,omitempty"`
}

// PromiseCompleteRequest defines model for PromiseCompleteRequest.
type PromiseCompleteRequest struct {
	State *PromiseStateComplete `json:"state,omitempty"`
	Value *PromiseValue         `json:"value,omitempty"`
}

// PromiseSearchResponse defines model for PromiseSearchResponse.
type PromiseSearchResponse struct {
	Cursor   *string    `json:"cursor,omitempty"`
	Promises *[]Promise `json:"promises,omitempty"`
}

// PromiseState defines model for PromiseState.
type PromiseState string

// PromiseStateComplete defines model for PromiseStateComplete.
type PromiseStateComplete string

// PromiseValue defines model for PromiseValue.
type PromiseValue struct {
	Data    *string            `json:"data,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
}

// Id defines model for Id.
type Id = string

// IdempotencyKey defines model for IdempotencyKey.
type IdempotencyKey = string

// QueryFilters defines model for QueryFilters.
type QueryFilters struct {
	// Cursor Cursor for pagination
	Cursor *string `json:"cursor,omitempty"`

	// Id Fuzzy search query string to find promises via fuzzy IDs. This string will be matched flexibly
	// against IDs in the system, so it does not need to exactly match the full ID.
	//
	// Some examples of valid fuzzy ID strings:
	// - "abc123*" - Would match ID "abc123def"
	// - "pro*fil" - Would match IDs containing "pro123file"
	Id *string `json:"id,omitempty"`

	// Limit Number of results
	Limit *int          `json:"limit,omitempty"`
	State *PromiseState `json:"state,omitempty"`
}

// RequestId defines model for RequestId.
type RequestId = string

// Strict defines model for Strict.
type Strict = bool

// SearchPromisesParams defines parameters for SearchPromises.
type SearchPromisesParams struct {
	Filters *QueryFilters `form:"filters,omitempty" json:"filters,omitempty"`
}

// CreatePromiseParams defines parameters for CreatePromise.
type CreatePromiseParams struct {
	// RequestId Unique ID for each request
	RequestId *RequestId `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates multiple requests
	IdempotencyKey *IdempotencyKey `json:"idempotency-key,omitempty"`

	// Strict If true, deduplicates only when promise is pending
	Strict *Strict `json:"strict,omitempty"`
}

// PatchPromisesIdParams defines parameters for PatchPromisesId.
type PatchPromisesIdParams struct {
	// RequestId Unique ID for each request
	RequestId *RequestId `json:"request-id,omitempty"`

	// IdempotencyKey Deduplicates multiple requests
	IdempotencyKey *IdempotencyKey `json:"idempotency-key,omitempty"`

	// Strict If true, deduplicates only when promise is pending
	Strict *Strict `json:"strict,omitempty"`
}

// CreatePromiseJSONRequestBody defines body for CreatePromise for application/json ContentType.
type CreatePromiseJSONRequestBody = Promise

// PatchPromisesIdJSONRequestBody defines body for PatchPromisesId for application/json ContentType.
type PatchPromisesIdJSONRequestBody = PromiseCompleteRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SearchPromises request
	SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePromiseWithBody request with any body
	CreatePromiseWithBody(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePromise(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromise request
	GetPromise(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPromisesIdWithBody request with any body
	PatchPromisesIdWithBody(ctx context.Context, id Id, params *PatchPromisesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPromisesId(ctx context.Context, id Id, params *PatchPromisesIdParams, body PatchPromisesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SearchPromises(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPromisesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromiseWithBody(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePromise(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePromiseRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromise(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromiseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPromisesIdWithBody(ctx context.Context, id Id, params *PatchPromisesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPromisesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPromisesId(ctx context.Context, id Id, params *PatchPromisesIdParams, body PatchPromisesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPromisesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSearchPromisesRequest generates requests for SearchPromises
func NewSearchPromisesRequest(server string, params *SearchPromisesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePromiseRequest calls the generic CreatePromise builder with application/json body
func NewCreatePromiseRequest(server string, params *CreatePromiseParams, body CreatePromiseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePromiseRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePromiseRequestWithBody generates requests for CreatePromise with any type of body
func NewCreatePromiseRequestWithBody(server string, params *CreatePromiseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

		if params.Strict != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "strict", runtime.ParamLocationHeader, *params.Strict)
			if err != nil {
				return nil, err
			}

			req.Header.Set("strict", headerParam2)
		}

	}

	return req, nil
}

// NewGetPromiseRequest generates requests for GetPromise
func NewGetPromiseRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPromisesIdRequest calls the generic PatchPromisesId builder with application/json body
func NewPatchPromisesIdRequest(server string, id Id, params *PatchPromisesIdParams, body PatchPromisesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPromisesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchPromisesIdRequestWithBody generates requests for PatchPromisesId with any type of body
func NewPatchPromisesIdRequestWithBody(server string, id Id, params *PatchPromisesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promises/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.RequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationHeader, *params.RequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("request-id", headerParam0)
		}

		if params.IdempotencyKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "idempotency-key", runtime.ParamLocationHeader, *params.IdempotencyKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("idempotency-key", headerParam1)
		}

		if params.Strict != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "strict", runtime.ParamLocationHeader, *params.Strict)
			if err != nil {
				return nil, err
			}

			req.Header.Set("strict", headerParam2)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SearchPromisesWithResponse request
	SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error)

	// CreatePromiseWithBodyWithResponse request with any body
	CreatePromiseWithBodyWithResponse(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	CreatePromiseWithResponse(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error)

	// GetPromiseWithResponse request
	GetPromiseWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetPromiseResponse, error)

	// PatchPromisesIdWithBodyWithResponse request with any body
	PatchPromisesIdWithBodyWithResponse(ctx context.Context, id Id, params *PatchPromisesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPromisesIdResponse, error)

	PatchPromisesIdWithResponse(ctx context.Context, id Id, params *PatchPromisesIdParams, body PatchPromisesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPromisesIdResponse, error)
}

type SearchPromisesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PromiseSearchResponse
}

// Status returns HTTPResponse.Status
func (r SearchPromisesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPromisesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
	JSON201      *Promise
}

// Status returns HTTPResponse.Status
func (r CreatePromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
}

// Status returns HTTPResponse.Status
func (r GetPromiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPromisesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promise
}

// Status returns HTTPResponse.Status
func (r PatchPromisesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPromisesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SearchPromisesWithResponse request returning *SearchPromisesResponse
func (c *ClientWithResponses) SearchPromisesWithResponse(ctx context.Context, params *SearchPromisesParams, reqEditors ...RequestEditorFn) (*SearchPromisesResponse, error) {
	rsp, err := c.SearchPromises(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPromisesResponse(rsp)
}

// CreatePromiseWithBodyWithResponse request with arbitrary body returning *CreatePromiseResponse
func (c *ClientWithResponses) CreatePromiseWithBodyWithResponse(ctx context.Context, params *CreatePromiseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromiseWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

func (c *ClientWithResponses) CreatePromiseWithResponse(ctx context.Context, params *CreatePromiseParams, body CreatePromiseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePromiseResponse, error) {
	rsp, err := c.CreatePromise(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePromiseResponse(rsp)
}

// GetPromiseWithResponse request returning *GetPromiseResponse
func (c *ClientWithResponses) GetPromiseWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetPromiseResponse, error) {
	rsp, err := c.GetPromise(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromiseResponse(rsp)
}

// PatchPromisesIdWithBodyWithResponse request with arbitrary body returning *PatchPromisesIdResponse
func (c *ClientWithResponses) PatchPromisesIdWithBodyWithResponse(ctx context.Context, id Id, params *PatchPromisesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPromisesIdResponse, error) {
	rsp, err := c.PatchPromisesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPromisesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPromisesIdWithResponse(ctx context.Context, id Id, params *PatchPromisesIdParams, body PatchPromisesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPromisesIdResponse, error) {
	rsp, err := c.PatchPromisesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPromisesIdResponse(rsp)
}

// ParseSearchPromisesResponse parses an HTTP response from a SearchPromisesWithResponse call
func ParseSearchPromisesResponse(rsp *http.Response) (*SearchPromisesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPromisesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PromiseSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePromiseResponse parses an HTTP response from a CreatePromiseWithResponse call
func ParseCreatePromiseResponse(rsp *http.Response) (*CreatePromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPromiseResponse parses an HTTP response from a GetPromiseWithResponse call
func ParseGetPromiseResponse(rsp *http.Response) (*GetPromiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPromisesIdResponse parses an HTTP response from a PatchPromisesIdWithResponse call
func ParsePatchPromisesIdResponse(rsp *http.Response) (*PatchPromisesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPromisesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promise
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
